extends layout

block styles
	link(rel="stylesheet" href="/stylesheets/restaurant.css")

block scripts
	script(type='text/javascript' src='/javascripts/scripts.js')

block content

	include slider

	-if ((sessionInfo == undefined) || (sessionInfo.loggedin !== true))
		include logreg

	.toggle-button
	#site
		#map-container.section.active
			.slide
				p.pageTitle Your Search Results
				#demo
				#map
		script(type='text/javascript').
			$(document).ready(function(){	
				var nearbyResArray2 = !{JSON.stringify(nearbyResArray)}
				var nearbyResArray = nearbyResArray2
				var map;
				var centerPoint = {lat: Number(nearbyResArray[0].location.latitude), lng: Number(nearbyResArray[0].location.longitude)}
				var markers = [];

				function initMap(){
					map = new google.maps.Map(document.getElementById('map'), {
						center: centerPoint,
						zoom: 12
					});	
					dropMarker()
				};

				function dropMarker(){
					var infoWindow = new google.maps.InfoWindow(), marker, i;
					for(let i = 0; i < nearbyResArray.length; i++){
						var marker = new google.maps.Marker({
							position: {lat: Number(nearbyResArray[i].location.latitude), lng:Number(nearbyResArray[i].location.longitude)},
							animation: google.maps.Animation.DROP,
							map: map,
						 	title: nearbyResArray[i].name,
						 	cuisines: nearbyResArray[i].cuisines,
						 	address: nearbyResArray[i].location.address,
						 	rating: nearbyResArray[i].user_rating.aggregate_rating,
						 	cost: nearbyResArray[i].price_range,
						 	url: nearbyResArray[i].url,
						 
						 	
						});
						//- console.log(nearbyResArray[i].name)
						infoWindow.setContent(nearbyResArray[i].name);
						markers.push(marker);
						console.log(markers[i].position)
						console.log(typeof(Number(nearbyResArray[i].location.latitude)))
						console.log(Number(nearbyResArray[i].location.longitude))
						console.log(markers)
						var startPoint = $('#demo').html();
						var latLonArray = startPoint.split(',');
						var latSplit = latLonArray[0].split(' ');
						var lonSplit = latLonArray[1].split(' ');
						var newLat = Number(latSplit[1])
						var newLong = Number(lonSplit[1])
						console.log(newLat);
						console.log(newLong);
						
						
						var newStartPoint = parseInt(startPoint);
						var distanceStats = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=" + startPoint + "&destinations=" + nearbyResArray[i].location.latitude + "," + nearbyResArray[i].location.longitude + "&key=AIzaSyDMhTz95_uN41xRrxZK4wxovk9VOE0KAcI";

						var service = new google.maps.DistanceMatrixService();
						service.getDistanceMatrix(
						  {
						    origins: [{lat: newLat, lng: newLong}],
						    destinations: [{lat:Number(nearbyResArray[i].location.latitude), lng:Number(nearbyResArray[i].location.longitude)}],
						    travelMode: 'DRIVING',
						  }, callback);

						function callback(response, status) {
							if (status == 'OK') {
								var origins = response.originAddresses;
								var destinations = response.destinationAddresses;
								
								for (var i = 0; i < origins.length; i++) {
									var results = response.rows[i].elements;
									for (var j = 0; j < results.length; j++) {
										console.log(results[j]);
										var element = results[j];
										var distance = element.distance.text;
										var duration = element.duration.text;
										var from = origins[i];
										var to = destinations[j];
										console.log(response)
										console.log(response.rows[0].elements[0].duration.text)
										var time = (response.rows[0].elements[0].duration.text)
										var miles = (response.rows[0].elements[0].distance.text)
										var splitMiles = miles.split(' ');
										var newSplitMiles = Number(splitMiles[0]);
										console.log(newSplitMiles)



										//- var splitMiles = miles.split(' ');
										//- var distanceMiles = splitMiles[0] * 0.621371
										//- console.log(distanceMiles)	

									}
								}
							}
						}
				
						


						for(let j = 0; j < markers.length; j++){
							markers[j].addListener('click', function() {
								infoWindow.open(map, markers[j]);
								infoWindow.setContent("<p>" + markers[j].address + "<br />" + 
								"cuisine: " + markers[j].cuisines + "<br />" + "rating(out of 5): " + markers[j].rating + "<br />" + "price range: " + markers[j].cost + "<br />" + "</p>");
							});	
						}
					}
				}

			
			
				function getLocation() {
					return new Promise((resolve, reject) => {
						if (navigator.geolocation){
							navigator.geolocation.getCurrentPosition(function(position){
								x.innerHTML = "lat: " + position.coords.latitude + "," + "lng: " + position.coords.longitude;
								console.log('Done setting the innerHTML')
								resolve();
							}, function(error){
								resolve(error);							
							})
						}else {
							x.innerHTML = "Geolocation is not supported by this browser."
							console.log("I updated the innerHTML. It is now ",x.innerHTML)
							reject();
						}
					});
				}


				var x = document.getElementById("demo");				
				var locPromise = getLocation();
				locPromise.then(function(){
					console.log(locPromise);
					//- console.log("Done running get. Starting Init Map")
					initMap();
					//- console.log("Done runnign Init Map.")
				});		



			});
		
		-for(let i = 0; i < nearbyResArray.length; i += 4)
			if(nearbyResArray[i] !== undefined)
				.section.returnedValues
					div(class='return' + (i+1))
						span.restTitle
							a(href=nearbyResArray[i].url) #{nearbyResArray[i].name}
						p= nearbyResArray[i].cuisines
						p= nearbyResArray[i].location.address
						p= nearbyResArray[i].location.locality_verbose
					if(nearbyResArray[i+1] !== undefined)		
						div(class='return' + (i+2))
							span.restTitle
								a(href=nearbyResArray[i+1].url) #{nearbyResArray[i+1].name}
							p= nearbyResArray[i+1].cuisines
							p= nearbyResArray[i+1].location.address
							p= nearbyResArray[i+1].location.locality_verbose							
					if(nearbyResArray[i+2] !== undefined)					
						div(class='return' + (i+3))
							span.restTitle #{nearbyResArray[i+2].name}
							p= nearbyResArray[i+2].cuisines
							p= nearbyResArray[i+2].location.address
							p= nearbyResArray[i+2].location.locality_verbose						
					if(nearbyResArray[i+3] !== undefined)					
						div(class='return' + (i+4))
							span.restTitle
								a(href=nearbyResArray[i+3].url) #{nearbyResArray[i+3].name}
							p= nearbyResArray[i+3].cuisines
							p= nearbyResArray[i+3].location.address
							p= nearbyResArray[i+3].location.locality_verbose																			
	 
	

		script(src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDMhTz95_uN41xRrxZK4wxovk9VOE0KAcI")



